#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# TODO remove image cache as we have to
# get the webpage anyway for the text

import wx
import os
import sys
import requests
import urllib
import PIL.Image
from bs4 import BeautifulSoup

class XKCD(object):
	XKCD_BASE_URL = 'http://xkcd.com/'
	TESTING = 0

	def __init__(self, comic_number=''):
		self.content      = None
		self.comic_number = None
		self.image_url    = None
		self.title        = None
		self.subtext      = None
		self._soup        = None

		if comic_number:
			try:
				int(comic_number)
			except ValueError:
				raise ValueError('comic_number must be valid')

		self.comic_number = comic_number
		self.content = self._get_page_content()
		self._soup = BeautifulSoup(self.content, 'lxml')

		self.image_url = self._get_image_url()
		self.subtext = self._get_image_subtext()
		self.title = self._get_image_title()

# public
	def get_image_properties(self):
		return (self.title, self.comic_number, self.subtext, self.image_url)

# private
	def _get_page_content(self):
		if self.TESTING:
			with open('/tmp/test.html', 'r') as t:
				return t.read()
		else:
			request = requests.get(self.XKCD_BASE_URL + self.comic_number)

			if request.status_code not in [200]:
				raise Exception('Cannot reach xkcd.com or comic_number ({}) does not exist'
						.format(self.comic_number))
			return request.content

# private
	def _get_image_url(self):
		div = self._soup.find('div', {'id':'comic'})
		img = div.find('img')
		img_src = img['src']
		return img_src

# private
	def _get_image_title(self):
		div = self._soup.find('div', {'id':'ctitle'})
		return div.text

# private
	def _get_image_subtext(self):
		div = self._soup.find('div', {'id':'comic'})
		img = div.find('img')
		img_title =  img['title']
		return img_title



class XKCD_UI(wx.Frame):
	IMAGE_DEST = '/tmp/xkcd_comic_{}.png'
	TESTING = 0

	def __init__(self, parent, xkcd_inst):
		super(XKCD_UI, self).__init__(parent, title='')

		xkcd_props = xkcd_inst.get_image_properties()
		self.window_title = xkcd_props[0]
		self.comic_num = xkcd_props[1] or 'latest'
		self.image_text = xkcd_props[2]
		self.image_url = xkcd_props[3]
		self.image_dest = self.IMAGE_DEST.format(self.comic_num)

		self.SetTitle(self.window_title)
		self.Bind(wx.EVT_CLOSE, self._on_close)
		self._retrieve_image()
		self._init_frame_elements()

		self.Show()

# private
	def _init_frame_elements(self):
		# font
		font = wx.SystemSettings_GetFont(wx.SYS_SYSTEM_FONT)
		font.SetPointSize(9)

		# Elements
		img = wx.StaticBitmap(self, 1, wx.Bitmap(self.image_dest, wx.BITMAP_TYPE_ANY))
		st2 = wx.StaticText(self, 1, label='#{}: {}'.format(self.comic_num, self.image_text))
		st2.SetFont(font)
		## Wrap text to image width
		st2.Wrap(self._get_image_size()[0])

		# Vertical sizer, text on top, Bitmap on bottom
		vbox = wx.BoxSizer(wx.VERTICAL)

		# horizontal sizer, text
		text_box = wx.BoxSizer(wx.HORIZONTAL)
		text_box.Add(st2)

		# horizontal sizer, bitmap
		img_box = wx.BoxSizer(wx.HORIZONTAL)
		img_box.Add(img)

		# Add hsizers to vbox
		vbox.Add(text_box, proportion=0, flag=wx.RIGHT | wx.LEFT | wx.TOP, border=10)
		vbox.Add((-1, 10))
		vbox.Add(img_box, proportion=0, flag=wx.ALL, border=10)

		self.SetSizerAndFit(vbox)

# private
	def _retrieve_image(self):
		if not os.path.exists(self.image_dest):
			print 'Downloading image'
			urllib.urlretrieve('http:' + self.image_url, self.image_dest)
		else:
			print 'Loading image from disk'

# private
	def _get_image_size(self):
		image = PIL.Image.open(self.image_dest)
		return image.size

# private
	def _on_close(self, event):
		self.Destroy()


if __name__ == '__main__':
	app = wx.App()
	comic_num = ((len(sys.argv) > 1) and sys.argv[1]) or ''
	ui = XKCD_UI(None, (XKCD(comic_num)))
	app.MainLoop()
